[General]

########################
## Network          ####
########################
include ../Parameters/Castalia.ini
sim-time-limit = 360s
seed-set = 42

# Radio range at 0dBm is around 30m
# At 25m, packets are lost frequently
# At 20m, less so. I'm using 20m currently.

# Let n be the number of nodes and R be the radio range (20m)
# We build the grid so that the diagonal neighbors have distance R
# For that, we find a triangle with hypotenuse R and sides x, x:
# x = sqrt((R**2) / 2)
# x is the distance between (non-diagonal) neighboring nodes

# If you want the grid described above, just set the sqrtNodes value
# to the square root of the total number of nodes in the grid:
.aux = ${sqrtNodes=3}
.aux2 = ${radioRange=20} # you can also adjust the radio range here

# The rest is calculated automatically:
SN.numNodes = pow(${sqrtNodes},2)
SN.field_x = (${sqrtNodes} - 1) * sqrt(${radioRange} * ${radioRange} / 2)
SN.field_y = (${sqrtNodes} - 1) * sqrt(${radioRange} * ${radioRange} / 2)
SN.deployment = "${sqrtNodes}x${sqrtNodes}"

SN.node[*].Communication.MACProtocolName = "IEEE802154"
SN.node[*].Communication.MAC.macBufferSize = 2048

########################
## Traces           ####
########################
SN.wirelessChannel.collectTraceInfo = false
SN.node[*].Communication.Radio.collectTraceInfo = false
SN.node[*].Communication.MAC.collectTraceInfo = false
SN.node[*].Communication.Routing.collectTraceInfo = false
SN.node[*].Application.collectTraceInfo = false
SN.node[*].SensorManager.collectTraceInfo = false
SN.node[*].ResourceManager.collectTraceInfo = false
SN.debugInfoFileName = "Castalia-Trace-${configname}-${runnumber}.txt"
SN.node[*].Communication.Radio.pcapFile = "trace-${configname}-${runnumber}.pcap" # Write a log of network traffic in pcap format
                                                                                  # Set to an empty string to disable
                                                                                  # Replaces existing file

########################
## Node             ####
########################
# Sink will startup 1 second earlier
SN.node[0].startupOffset = 0
SN.node[0].startupRandomization = 0
SN.node[*].startupOffset = 1
SN.node[*].startupRandomization = 0.141855 # One MAC period at 0.01 duty cycle

########################
## Resource Manager ####
########################
#SN.node[*].ResourceManager.sigmaCPUClockDrift = 0.0 # Adjust the clock drift between nodes.
                                                    # 0 means all the clocks are always perfectly synchronized
SN.node[*].ResourceManager.temperature = 25C
SN.node[*].ResourceManager.temperatureModelFile = "../Parameters/PhysicalProcess/temperature_model.txt"

########################
## Application      ####
########################
# The GeoSync application works with other routing protocols.
# The configuration in this part does not assume TSTP.
# TSTP overwrites the PTP and HECOPS configurations done here.
SN.node[*].ApplicationName = "GeoSync"
SN.node[0].Application.dataPeriod = 0s # Usually, all sinks should have dataPeriod 0
SN.node[*].Application.dataPeriod = ${dataPeriod=30s}
SN.node[*].Application.ptpPeriod = ${dataPeriod}
SN.node[*].Application.hecopsPeriod = ${dataPeriod}
SN.node[0].Application.ptpMaster = true
SN.node[*].Application.ptpMaster = false
SN.node[*].Application.startupDelay = 0s
SN.node[*].Application.startupRandomDelay = 0s
SN.node[*].Application.packetTimeLimit = 300s
SN.node[*].Application.dataPacketLimit = 0
SN.node[*].Application.LISHAIoTSeriesName = "010000002805382c2b2d85289c630000"

########################
## Wireless Channel ####
########################
SN.wirelessChannel.onlyStaticNodes = true
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0
SN.wirelessChannel.pathLossExponent = 2.0 # Free Space

########################
## Radio           #####
########################
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420.txt"
SN.node[*].Communication.Radio.symbolsForRSSI = 8
SN.node[*].Communication.Radio.TxOutputPower = "-10dBm"
SN.node[*].Communication.Radio.stateAfterTX = "SLEEP"

########################
## Configs         #####
########################
[Config TSTP]
SN.node[*].Communication.RoutingProtocolName = "TSTP"
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NED"

SN.node[*].Application.ptpPeriod = 0 # TSTP does not use application-level PTP
SN.node[*].Application.ptpMaster = false # TSTP does not use application-level PTP
SN.node[*].Application.hecopsPeriod = 0 # TSTP does not use application-level HECOPS

# List of sinks
SN.node[0].Communication.Routing.sink = true

SN.node[*].Communication.Routing.radioRange = ${radioRange}m # Packets arriving from farther than this distance are discarded to avoid radio range assymetry
SN.node[*].Communication.Routing.dropExpired = true # Whether to drop expired packets or try to send them forever
SN.node[*].Communication.Routing.expiry = ${dataPeriod}
SN.node[*].Communication.Routing.usePtpExplicitSync = ${explicitPtp=true,false} # Enable/disable explicit PTP
SN.node[*].Communication.Routing.keepAlivePeriod = ${dataPeriod} # Set to 0 to disable keep alives
SN.node[*].Communication.Routing.expiryBetha = 1 # Betha coefficient used in expiry routing metric
SN.node[*].Communication.Routing.useExpiryMetric = false
SN.node[*].Communication.Routing.useRandomMetric = false
SN.node[*].Communication.Routing.useEffortMetric = false
SN.node[*].Communication.Routing.useOldExpiryMetric = false

SN.node[*].Communication.Routing.startWithKeysEstablished = false
SN.node[*].Communication.Routing.keyManagerPeriod = 10s
SN.node[*].Communication.Routing.securityTimeWindow = ${dataPeriod}
SN.node[*].Communication.Routing.securityEnabled = false

SN.node[*].Communication.MAC.randomBackoff = true
SN.node[*].Communication.MAC.dutyCycle = ${DC=0.01}
SN.node[*].Communication.MAC.alwaysTxData = true # If true, data frames are sent even in explicit ACK's
SN.node[*].Communication.MAC.enableCrc = false # Enable/disable CRC checking/computation at the two last bytes of each frame
SN.node[*].Communication.MAC.dataListenMarginMultiplier = 1
SN.node[*].Communication.MAC.enableSynchronousOptimization = false
SN.node[*].Communication.MAC.synchronousOptimizationMaximumDrift = 1

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec

[Config TSTPNOMF]
SN.node[*].Communication.RoutingProtocolName = "TSTP"
SN.node[*].Communication.MACProtocolName = "TSTP_MAC_NOMF_NED"
SN.node[*].Communication.Radio.stateAfterTX = "RX"

SN.node[*].Application.ptpPeriod = 0 # TSTP does not use application-level PTP
SN.node[*].Application.ptpMaster = false # TSTP does not use application-level PTP
SN.node[*].Application.hecopsPeriod = 0 # TSTP does not use application-level HECOPS

# List of sinks
SN.node[0].Communication.Routing.sink = true

SN.node[*].Communication.Routing.radioRange = ${radioRange}m # Packets arriving from farther than this distance are discarded to avoid radio range assymetry
SN.node[*].Communication.Routing.dropExpired = true # Whether to drop expired packets or try to send them forever
SN.node[*].Communication.Routing.expiry = ${dataPeriod}
SN.node[*].Communication.Routing.usePtpExplicitSync = ${explicitPtp=true,false} # Enable/disable explicit PTP
SN.node[*].Communication.Routing.keepAlivePeriod = ${dataPeriod} # Set to 0 to disable keep alives
SN.node[*].Communication.Routing.expiryBetha = 1 # Betha coefficient used in expiry routing metric
SN.node[*].Communication.Routing.useExpiryMetric = false
SN.node[*].Communication.Routing.useRandomMetric = false
SN.node[*].Communication.Routing.useEffortMetric = false
SN.node[*].Communication.Routing.useOldExpiryMetric = false

SN.node[*].Communication.Routing.startWithKeysEstablished = false
SN.node[*].Communication.Routing.keyManagerPeriod = 10s
SN.node[*].Communication.Routing.securityTimeWindow = ${dataPeriod}
SN.node[*].Communication.Routing.securityEnabled = false

SN.node[*].Communication.MAC.period = ${period=0.15}s
SN.node[*].Communication.MAC.randomBackoff = true
SN.node[*].Communication.MAC.enableCrc = false # Enable/disable CRC checking/computation at the two last bytes of each frame

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec

[Config OTHERS]
SN.node[*].Communication.RoutingProtocolName = ${"BypassRouting","AodvRouting","AodvTestRouting","LabileRouting","RELRouting"}
#SN.node[*].Communication.Routing.activeRouteTimeout = 3600000
#SN.node[*].Communication.Routing.helloInterval = 1000
SN.node[*].Communication.Routing.rreqRatelimit = 1
SN.node[*].Communication.Routing.rerrRatelimit = 1
SN.node[*].Communication.Routing.hopCountThreshould = 20
SN.node[*].Communication.Routing.netBufferSize = 2048
SN.node[0].Communication.Routing.isSink = true
SN.node[*].Communication.Routing.slotLength = 0.2
SN.node[*].Communication.Routing.roundLength = 20s
SN.node[*].Communication.Routing.percentage = 0.05
SN.node[*].Communication.Routing.powersConfig = xmldoc("powersConfig.xml")

output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
